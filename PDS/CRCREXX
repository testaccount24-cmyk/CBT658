CRCREXX TITLE 'ROUTINE TO CALCULATE A CRC VALUE FOR ANY INPUT STRING'
*%A LOAD(ISPLLIB) MAC3(ASM) LET RMODE(24)
*L  NAME  CRCREXX(R)
*
*======================================================================
*                                                                     *
*       THIS SUBROUTINE IS DESIGNED TO BE CALLED BY A REXX EXEC.  THE *
*  REXX EXEC SHOULD CALL THIS WITH 1 ARGUMENTS.  THE ARGUMENT IS THE  *
*  CHARACTER STRING FOR WHICH THE CRC IS TO BE CALCULATED.  THE REXX  *
*  WILL PASS A LENGTH AND THE SUBROUTINE WILL USE IT TO DECIDE HOW    *
*  MANY CHARACTERS SHOULD BE USED FOR THE CRC CALCULATION.            *
*                                                                     *
*=====================================================================*
*
*    MAKE A PRETTY EYE CATCHER FOR THIS PROGRAM
*
CRCREXX  CSECT
         YREGS
         USING CRCREXX,R15         (ESTABLISH TEMPORARY BASE).
         B     BEGIN               SKIP OVER HEADER.
HEAD1    DC    AL1(HEADL)          EXCLUSIVE LENGTH OF HEADER.
HEAD     DC    C'CRCREXX - ONE ARG - &SYSDATE - &SYSTIME'
HEADL    EQU   *-HEAD
         DROP  R15                 DROP TEMPORARY BASE.
*
*    DO THE REQUISITE HOUSEKEEPING CHORES
*
BEGIN    STM   R14,R12,12(R13)     PUT CALLER'S REGS IN SAVE AREA.
         LR    R12,R15             COPY BASE TO MY BASE REG.
         USING CRCREXX,R12         TELL ASSEMBLER ABOUT NEW BASE.
         LA    R6,SAVE             MAKE R6 POINT TO MY SAVE AREA.
         ST    R6,8(,R13)          CHAIN SAVE AREAS ...
         ST    R13,4(,R6)          ... TO COMPLETE LINKAGE.
         LR    R13,R6              POINT TO MY SAVE AREA FOR LATER
*
*    PROCESS ARGS
*
         LR    R2,R0               GET ADDRESS OF ENVIRONMENT BLOCK
         LR    R3,R1               GET ADDRESS OF EXT FUN PARM INTERF
         L     R4,16(,R3)          ADDRESS OF FIRST ARGUMENT POINTER
         L     R5,0(,R4)           GET FIRST ARGUMENT'S ADDRESS
         L     R11,4(,R4)          GET LENGTH OF ARGUMENT
*
* R5 NOW POINTS TO THE ARG AND R11 HAS ITS LENGTH
*
* THIS SAMPLE WAS USED TO TEST DURING DEBUGGING
*Q1      L     R11,QBUFFLEN        TEST BUFFER USED TO TEST
*Q2      LA    5,QBUFFER           TEST BUFFER LENGTH
*
*    SET UP THE ACTUAL CRC LOOP
*
         LA    R11,0(R5,R11)       LAST BUFFER ADDRESS FOR COMPARE
         BCTR  R11,R0              DROP ONE CHAR FOR IBM COUNT
         LA    R10,1               GET AN INCREMENT OF 1 BYTE
         L     R8,ONEFOX           GET A ONE BYTE MASK FOR ANDING
         XR    R6,R6               CLEAR R6 AND THEN TURN ON ALL
         BCTR  R6,R0               ... THE BITS IN THE REGISTER
*
*    NOW LOOP THROUGH THE DATA
*
LOOP     EQU   *
         IC    R7,0(R5)            GET THE NEXT CHAR FROM THE BUFFER
         XR    R7,R6               EXCLUSIVE OR TO INTERMEDIATE CRC
         NR    R7,R8               AND RESULT TO ONE BYTE
         SLL   R7,2                MULTIPLY BY FOUR FOR WORD INDEX
         SRL   R6,8                PART OF THE CRC ALGORITHM
         X     R6,CRCTABLE(R7)     UPDATE INTERMEDIATE CRC CALCULATION
         BXLE  R5,R10,LOOP         LOOP UNTIL END ( R10=INCR, R11=MAX )
*
*    WE'RE DONE IF WE GET THIS FAR
*
         XR    R7,R7               CLEAR R7 AND THEN TURN ON ALL
         BCT   R7,FINALIZE         ... THE BITS IN THE REGISTER
FINALIZE XR    R6,R7               ... AND XOR IT INTO CRC
*
*    THESE CAN BE UNCOMMENTED FOR THE STANDALONE TEST PROGRAM
*Q3       STCM  R6,15,QMESS1
*Q4       CALL  PUTMESSR
*QMESS1   DC    CL80'     IS THE CALCULATED CRC.'
*
         STCM  R6,15,CHAR4         SAVE FINAL CRC FOR RETURNTO REXX
*
*    WE'VE PUT OUR RESULT AWAY NOW GIVE IT TO THE REXX
*
         L     R4,20(,R3)          GET EVALUATION BLOCK ADDRESS PTR
         L     R4,0(,R4)           GET EVALUATION BLOCK ADDRESS
         L     R10,4(,R4)          GET EVAL BLOCK SIZE
         LA    R1,IRXRLTPB         POINT TO PARAMETER BLOCK
         LINK  EP=IRXRLT           GET ADDRESS OF IRXRLT ROUTINE
         LTR   R10,R15             CHECK RETURN CODE
         BZ    BIGGEROK            IF IT WAS OK CONTINUE
         B     LEAVE               EXIT THE ROUTINE
BIGGEROK EQU   *
         L     R4,IRXRLTPB+4       GET NEW EVAL BLOCK ADDRESS POINTER
         L     R4,0(,R4)           NEW GET ACTUAL ADDRESS
         L     R10,4(,R4)          GET NEW EVAL BLOCK SIZE
LEAVE    EQU   *
         L     R5,NEWSIZE          GET RETURNED STRING LENGTH
         ST    R5,8(,R4)           PUT IT IN EVAL BLOCK
         MVC   16(4,R4),CHAR4      MOVE ACTUAL ARG INTO BLOCK
*
*    FINALLY RETURN TO THE CALLER
*
         L     R13,SAVE+4          GET ORIGINAL REGISTER 13
         LM    R14,R12,12(R13)     RESTORE REST OF ORIGINAL REGISTERS
         SR    R15,R15             SET ZERO RETURN CODE
         BR    R14                 USE RETURN ADDRESS
*
*    DEFINE DATA TO BE USED IN THIS PROGRAM
*
         DS    0F
SAVE     DS    9D                  REGISTER SAVE AREA
*
GETNAME  DC    CL8'GETBLOCK'       REQUEST LARGER EVALUATION BLOCK
NEWSIZE  DC    1F'4'               LENGTH OF RETURNED ARGUMENT
NEWBLOCK DS    1F                  NEW EVAL BLOCK ADDRESS WILL BE HERE
IRXRLTPB DC    AL4(GETNAME)        POINTER TO NAME OF REQUEST TYPE
         DC    AL4(NEWBLOCK)       OLD EVAL BLOCK ADDRESS GOES HERE
         DC    AL4(X'80000000'+NEWSIZE)
*
         SPACE 1
         DS    0D
CHAR4    DC    AL4(0)              THE CRC WILL GO HERE
ONEFOX   DC    X'000000FF'         USED TO LIMIT THE ANDING
*
         DS    0H                  CRC CALC TABLE
CRCTABLE EQU   *
         DC    X'0000000077073096EE0E612C990951BA'  00-03
         DC    X'076DC419706AF48FE963A5359E6495A3'  04-07
         DC    X'0EDB883279DCB8A4E0D5E91E97D2D988'  08-0B
         DC    X'09B64C2B7EB17CBDE7B82D0790BF1D91'  0C-0F
         DC    X'1DB710646AB020F2F3B9714884BE41DE'  10-13
         DC    X'1ADAD47D6DDDE4EBF4D4B55183D385C7'  14-17
         DC    X'136C9856646BA8C0FD62F97A8A65C9EC'  18-1B
         DC    X'14015C4F63066CD9FA0F3D638D080DF5'  1C-1F
         DC    X'3B6E20C84C69105ED56041E4A2677172'  20-23
         DC    X'3C03E4D14B04D447D20D85FDA50AB56B'  24-27
         DC    X'35B5A8FA42B2986CDBBBC9D6ACBCF940'  28-2B
         DC    X'32D86CE345DF5C75DCD60DCFABD13D59'  2C-2F
         DC    X'26D930AC51DE003AC8D75180BFD06116'  30-33
         DC    X'21B4F4B556B3C423CFBA9599B8BDA50F'  34-37
         DC    X'2802B89E5F058808C60CD9B2B10BE924'  38-3B
         DC    X'2F6F7C8758684C11C1611DABB6662D3D'  3C-3F
         DC    X'76DC419001DB710698D220BCEFD5102A'  40-43
         DC    X'71B1858906B6B51F9FBFE4A5E8B8D433'  44-47
         DC    X'7807C9A20F00F9349609A88EE10E9818'  48-4B
         DC    X'7F6A0DBB086D3D2D91646C97E6635C01'  4C-4F
         DC    X'6B6B51F41C6C6162856530D8F262004E'  50-53
         DC    X'6C0695ED1B01A57B8208F4C1F50FC457'  54-57
         DC    X'65B0D9C612B7E9508BBEB8EAFCB9887C'  58-5B
         DC    X'62DD1DDF15DA2D498CD37CF3FBD44C65'  5C-5F
         DC    X'4DB261583AB551CEA3BC0074D4BB30E2'  60-63
         DC    X'4ADFA5413DD895D7A4D1C46DD3D6F4FB'  64-67
         DC    X'4369E96A346ED9FCAD678846DA60B8D0'  68-6B
         DC    X'44042D7333031DE5AA0A4C5FDD0D7CC9'  6C-6F
         DC    X'5005713C270241AABE0B1010C90C2086'  70-73
         DC    X'5768B525206F85B3B966D409CE61E49F'  74-77
         DC    X'5EDEF90E29D9C998B0D09822C7D7A8B4'  78-7B
         DC    X'59B33D172EB40D81B7BD5C3BC0BA6CAD'  7C-7F
         DC    X'EDB883209ABFB3B603B6E20C74B1D29A'  80-83
         DC    X'EAD547399DD277AF04DB261573DC1683'  84-87
         DC    X'E3630B1294643B840D6D6A3E7A6A5AA8'  88-8B
         DC    X'E40ECF0B9309FF9D0A00AE277D079EB1'  8C-8F
         DC    X'F00F93448708A3D21E01F2686906C2FE'  90-93
         DC    X'F762575D806567CB196C36716E6B06E7'  94-97
         DC    X'FED41B7689D32BE010DA7A5A67DD4ACC'  98-9B
         DC    X'F9B9DF6F8EBEEFF917B7BE4360B08ED5'  9C-9F
         DC    X'D6D6A3E8A1D1937E38D8C2C44FDFF252'  A0-A3
         DC    X'D1BB67F1A6BC57673FB506DD48B2364B'  A4-A7
         DC    X'D80D2BDAAF0A1B4C36034AF641047A60'  A8-AB
         DC    X'DF60EFC3A867DF55316E8EEF4669BE79'  AC-AF
         DC    X'CB61B38CBC66831A256FD2A05268E236'  B0-B3
         DC    X'CC0C7795BB0B4703220216B95505262F'  B4-B7
         DC    X'C5BA3BBEB2BD0B282BB45A925CB36A04'  B8-BB
         DC    X'C2D7FFA7B5D0CF312CD99E8B5BDEAE1D'  BC-BF
         DC    X'9B64C2B0EC63F226756AA39C026D930A'  C0-C3
         DC    X'9C0906A9EB0E363F7207678505005713'  C4-C7
         DC    X'95BF4A82E2B87A147BB12BAE0CB61B38'  C8-CB
         DC    X'92D28E9BE5D5BE0D7CDCEFB70BDBDF21'  CC-CF
         DC    X'86D3D2D4F1D4E24268DDB3F81FDA836E'  D0-D3
         DC    X'81BE16CDF6B9265B6FB077E118B74777'  D4-D7
         DC    X'88085AE6FF0F6A7066063BCA11010B5C'  D8-DB
         DC    X'8F659EFFF862AE69616BFFD3166CCF45'  DC-DF
         DC    X'A00AE278D70DD2EE4E0483543903B3C2'  E0-E3
         DC    X'A7672661D06016F74969474D3E6E77DB'  E4-E7
         DC    X'AED16A4AD9D65ADC40DF0B6637D83BF0'  E8-EB
         DC    X'A9BCAE53DEBB9EC547B2CF7F30B5FFE9'  EC-EF
         DC    X'BDBDF21CCABAC28A53B3933024B4A3A6'  F0-F3
         DC    X'BAD03605CDD7069354DE572923D967BF'  F4-F7
         DC    X'B3667A2EC4614AB85D681B022A6F2B94'  F8-FB
         DC    X'B40BBE37C30C8EA15A05DF1B2D02EF8D'  FC-FF
*
*   THESE DEFINITIONS CAN BE UNCOMMENTED TO SET UP TEST DATA AND THE
*         TEST DATA CAN BE CHANGED FOR TESTING PURPOSES.  TO TEST
*         WITH THE TEST DATA CHANGE '*Q' IN POSITION 1 TO 'Q' IN THIS
*         ENTIRE MEMBER AND THE TEST DATA CRC WILL BHE CALCULATED.
*         TO MODIFY THE TEST DATA, SIMPLY CHANGE THE DEFINITIONS
*         BELOW.  WHEN TESTING, THIS PROGRAM CAN BE RUN FROM THE
*         COMMAND LINE AND WILL DISPLAY THE CALCULATED CRC.
*
*QBUFFLEN DC    AL4(QBUFFEND-QBUFFER)
*
*QBUFFER  DC    X'80'
*QA       DC    1000000X'00'
*QB       DC    X'FF'
*QBUFFEND EQU   *
*
         END   CRCREXX             END OF PROG.
